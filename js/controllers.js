// Generated by LiveScript 1.3.1
(function(){
  var controllers;
  controllers = angular.module('spore-ui.controllers', []);
  controllers.controller('methodsCtrl', [
    '$scope', 'constants', 'ngProgress', 'mytools', function($scope, constants, ngProgress, mytools){
      $scope.sporeClient = void 8;
      $scope.forms = {};
      $scope.hideResults = true;
      $scope.hideSearch = true;
      $scope.currentClientTitle = "Select a client";
      $scope.sporeIsReady = false;
      $scope.errors = {};
      ngProgress.color("white");
      ngProgress.height('5px');
      this.Submit = function(name){
        var checkParams, params, e;
        try {
          checkParams = true;
          return params = mytools.validAndCleanAndEncode($scope.forms[name]);
        } catch (e$) {
          e = e$;
          window.console.error(e);
          return checkParams = false;
        } finally {
          if ($scope.sporeIsReady && checkParams) {
            ngProgress.start();
            $scope.sporeClient.methods[name](params, function(response){
              $scope.hideSearch = true;
              $scope.hideResults = false;
              $scope.methctrl.results = response.length != null
                ? response
                : [response];
              ngProgress.complete();
              angular.element('#' + name + '-form>fieldset>.form-group').removeClass('has-error');
              return $scope.errors[name] = void 8;
            }, function(response){
              angular.element('#' + name + '-form>fieldset>.form-group').addClass('has-error');
              ngProgress.complete();
              return $scope.errors[name] = response;
            });
          } else {
            window.console.error("Client spore non initialisé ou mauvais paramètres");
            angular.element('#' + name + '-form>fieldset>.form-group').addClass('has-error');
            $scope.errors[name] = "Spore client not initialized or wrong parameters";
          }
        }
      };
      this.Menu = function(name){
        var k, ref$, v, results$ = [];
        $scope.hideResults = true;
        $scope.hideSearch = false;
        for (k in ref$ = $scope.forms) {
          v = ref$[k];
          if (k === name) {
            results$.push($scope[k] = true);
          } else {
            results$.push($scope[k] = false);
          }
        }
        return results$;
      };
      this.Return = function(){
        $scope.hideResults = true;
        return $scope.hideSearch = false;
      };
      this.Client = function(name){
        var client;
        $scope.sporeIsReady = false;
        $scope.hideResults = true;
        $scope.hideSearch = true;
        $scope.showAddToken = true;
        $scope.showRemoveToken = false;
        return client = new Spore(constants.descriptionFiles[name], function(){
          if (client.isReady === true) {
            return $scope.$apply(function(){
              $scope.sporeClient = client;
              $scope.forms = mytools.generateForm($scope.sporeClient.description.methods);
              $scope.sporeIsReady = true;
              return $scope.currentClientTitle = client.description.name;
            });
          }
        }, function(){
          return window.console.error('An error occured with spore client creation');
        });
      };
      this.AddToken = function(token){
        var auth;
        if ($scope.sporeIsReady) {
          auth = {
            key_name: "Authorization",
            key_value: "Token " + token
          };
          $scope.sporeClient.enable(SporeMiddlewareAuthApiKey, auth);
          $scope.showAddToken = false;
          return $scope.showRemoveToken = true;
        }
      };
      return this.RemoveToken = function(){
        var i$, ref$, len$, m;
        if ($scope.sporeIsReady) {
          for (i$ = 0, len$ = (ref$ = $scope.sporeClient.middlewares).length; i$ < len$; ++i$) {
            m = ref$[i$];
            if (m.params.key_name === "Authorization") {
              $scope.sporeClient.middlewares.pop(m);
            }
          }
          $scope.showAddToken = true;
          return $scope.showRemoveToken = false;
        }
      };
    }
  ]);
}).call(this);
